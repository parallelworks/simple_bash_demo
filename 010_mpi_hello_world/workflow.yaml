jobs:
  main:
    steps:

      - name: Install Intel-OneAPI-MPI
        if: ${{ inputs.install_mpi }}
        run: |
           ${{ inputs.ssh_cmd}} 'bash -s' < ./010_mpi_hello_world/install_intel_mpi_with_spack.sh
         
'on':
  execute:
    inputs:
      install_mpi:
        label: Install Intel-OneAPI-MPI?
        type: boolean
        default: true
        tooltip: If yes is selected, the job install intel-oneapi-mpi. Otherwise, you must provide a command to load MPI.
      load_mpi:
        label: Command to load MPI
        type: string
        hidden: ${{ inputs.install_mpi }}
        ignore: ${{ .hidden }}
        optional: ${{ .hidden }}
        tooltip: 'To load the MPI environment, enter the appropriate command, for example: module load module-name or source path/to/env.sh.'
      np:
        label: Number of Processes
        type: number
        min: 2
        max: 100
        default: 2
        tooltip: Number of MPI processes
      resource:
        label: Resource
        type: compute-clusters
        tooltip: Choose the resource for script submission
      jobschedulertype:
        label: Select Controller, SLURM Partition or PBS Queue
        type: dropdown
        options:
          - label: Controller or Login Node
            value: CONTROLLER
          - label: SLURM Partition
            value: SLURM
          - label: PBS Queue
            value: PBS
        tooltip: Job will submitted using SSH, sbatch or qsub, respectively
      scheduler_directives:
        label: Type the scheduler directives
        type: editor
        default: '#!/bin/bash'
        hidden: ${{ inputs.jobschedulertype === CONTROLLER }}
        optional: ${{.hi}}
      wait_for_job:
        label: Wait for the PBS job or fire and forget?
        type: boolean
        default: true
        hidden: ${{ inputs.jobschedulertype === CONTROLLER }}
        ignore: ${{ .hidden }}
        optional: ${{ .hidden }}
        tooltip: If yes is selected, the PW job waits for the SLURM or PBS job to complete while continuously monitoring its status and the possibility to cancel the SLURM or PBS job when the PW job is canceled
      ssh_cmd:
        type: string
        hidden: true
        default: ssh -o StrictHostKeyChecking=no ${{ inputs.resource.ip }}
